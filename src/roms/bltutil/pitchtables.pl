#!/usr/bin/env perl

# MIT License
# 
# Copyright (c) 2023 Dossytronics
# https://github.com/dominicbeesley/blitter-65xx-code
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

use strict;

# calculate BBC pitch lookup tables

my @org_lo = (
0xf0,
0xb7,
0x82,
0x4f,
0x20,
0xf3,
0xc8,
0xa0,
0x7b,
0x57,
0x35,
0x16
);

my @org_hi = (
3,
3,
3,
3,
3,
2,
2,
2,
2,
2,
2,
2
);

my @org_eigth_adj = (
0x0e,
0x0d,
0x0c,
0x0c,
0x0b,
0x0a,
0x0a,
0x09,
0x09,
0x08,
0x08,
0x07
);


#calc new period values for each semitone 
my $PAULA_FREQ = 3547672;
my $SAM_LEN = 32;
my $MIDDLE_C = 261.625;

my @new_lo;
my @new_hi;
my @new_adj;
my @new_p;

for (my $i = 0 ; $i < 12; $i++) {
	# calculate frequencies based on B 2 octaves below middle C
	my $f = 123.47 * 2**($i/12);
	my $f2 = 123.47 * 2**(($i+1)/12);
	my $p = int($PAULA_FREQ / ($SAM_LEN * $f));
	my $p2 = int($PAULA_FREQ / ($SAM_LEN * $f2));
	my $e = ($p-$p2)/4;
	printf "%5.2f %5d %2d\n", $f, $p, $e;
	push @new_lo, $p & 0xFF;
	push @new_hi, $p >> 8;
	push @new_adj, $e;
	push @new_p, $p;
}

my $SAM_RATE = $MIDDLE_C * $SAM_LEN;
my $MIDDLE_C_ACT = $PAULA_FREQ/($SAM_LEN*@new_p[1]/2);
my $SAM_RATE_ACT = $MIDDLE_C_ACT * $SAM_LEN;

#for (my $i = 0 ; $i < 12; $i++) {
#	printf "%04X %04X %04X\n", @new_lo[$i], @new_hi[$i], @new_adj[$i];
#}


print "============================= ORIGINAL =====================================\n\n";
print_pitch_freqs(4000000/32, \@org_lo, \@org_hi, \@org_eigth_adj);


print "=============================   NEW    =====================================\n\n";
print_pitch_freqs($PAULA_FREQ/$SAM_LEN, \@new_lo, \@new_hi, \@new_adj);

print "\n\n; Generated by pitchtable.pl, assumptions:\n";
print "; PAULA_FREQ=$PAULA_FREQ\n";
print "; SAMPLE_LEN=$SAM_LEN\n";
print "; SAMPLE_RATE=$SAM_RATE (middle C) [$SAM_RATE_ACT]\n";
print "; note these tables are packed differently to the MOS with 3 bits for HI and 5 for 8th adjust\n\n";


print "_SOUND_PITCH_TABLE_1:\t";
for (my $i = 0; $i < 12; $i++) {
	printf "\t\t\t.byte \$%02X\n", @new_lo[$i];
}
print "_SOUND_PITCH_TABLE_2:\t";
for (my $i = 0; $i < 12; $i++) {
	my $x = @new_hi[$i] | @new_adj[$i] << 3;
	printf "\t\t\t.byte \$%02X\n", $x;
}



sub print_pitch_freqs($@@@) {
	my ($f0, $lo, $hi, $adj) = @_;

	for (my $p; $p < 256; $p++) {

		my $oct = int($p / 48);
		my $sem = int($p / 4) % 12;
		my $eig = $p % 4;

		my $pp = @$lo[$sem] + 256 * @$hi[$sem];
		my $X = @$adj[$sem];

		for (my $i = 0; $i < $eig; $i++) {
			$pp -= $X;
		}

		$pp = $pp >> $oct;

		#actual freq from sound chip
		my $f = $f0 / $pp;

		#correct freq according to formula 
		my $cf = 2**($oct-1) * 246.94 * 2**(($sem*4+$eig)/48);
		my $cf2 = 2**($oct-1) * 246.94 * 2**((($sem+1)*4+$eig)/48);

		#calculate error 
		my $er2 = ($f-$cf)/($cf2-$cf);

		printf "%4d %2d %2d %2d %5d %5.2f %5.2f %5.2f\n", $p,$oct,$sem,$eig,$pp,$f,$cf,$er2;
	}
}