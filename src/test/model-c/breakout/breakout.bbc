MODE 5:HIMEM=&3000:*LOAD S.BRKOUT 3000
VDU 23,1,0;0;0;0;0;
PROCpal:?&EE=&D1:?&FCFF=&D1:?&FCFD=&FB:?&FCFE=&FF

VDU 23,240,&FF,&80,&80,&80,&80,&80,&80,&FF
VDU 23,241,&FF,&00,&00,&00,&00,&00,&00,&FF
VDU 23,242,&FF,&01,&01,&01,&01,&01,&01,&FF

VDU 19,1,8,0,0,0
VDU 19,2,10,0,0,0
VDU 19,3,11,0,0,0



REM spritelist areas
L1%=&4000:L2%=&4800

DIM BR%(5,5)
FORI%=0TO4:FORJ%=0TO4:BR%(I%,J%)=1+RND(3):NEXT,

REPEAT

GCOL0,2:MOVE0,0:DRAW 1279,0:DRAW 1279,1023:DRAW 0,1023:DRAW 0,0
FORI%=0TO100:PLOT69,RND(1280),RND(1024):NEXT

FORI%=0TO4:FORJ%=0TO4
N%=BR%(I%,J%)
IF N%>0 THEN COLOUR 3:COLOUR128+(N%AND1)*2:P.TAB(I%*4,J%+5);:VDU240,241,241,242
NEXT,
COLOUR 7:COLOUR128


SBM%=10:SBI%=3
BATX%=160-8:BATY%=200:SB%=0
W%=320:H%=256
Z%=0:L%=128:R%=L%+320-16-1:T%=32:B%=T%+256-16-1
X%=200:SX%=12:Y%=200:SY%=-6
*FX19
DIE%=FALSE
REPEAT
PROCball
PROCbat
PROCcollidebat
PROCupdate_sprites
UNTILDIE%
*FX15
PRINT TAB(8,15);"DEAD"
TIME=0:REPEAT:UNTILTIME>100
CLS
UNTILFALSE

END

DEFPROCcollidebat
IFY%>=B%-16THENDIE%=TRUE
IFY%+16<BATY% OR SY%<=0 THEN ENDPROC
IFY%+16>BATY%+10 THEN ENDPROC
IFX%+16<BATX%ORX%>BATX%+32THEN ENDPROC
Y%=Y%-2*((Y%+16)-BATY%)
SY%=-SY%
ENDPROC

DEFPROCball
Z%=(Z%+&80)AND&3FF
X%=X%+SX%:IF X%>W%-16 OR X%<=0THENSX%=-SX%
Y%=Y%+SY%:IF Y%<=0THENSY%=-SY%
ENDPROC

DEFPROCbat:LOCALA%
IF INKEY(-98) THEN A%=1:PROCb1(-1)
IF INKEY(-67) THEN A%=1:PROCb1(1)
IF A%=0 THEN SB%=SB%-SBI%*SGN(SB%)
BATX%=BATX%+SB%
IF BATX%<0 THEN BATX%=0 ELSE IF BATX%>=W%-32 THEN BATX%=W%-32
ENDPROC

DEFPROCb1(D%)
IF SB%<>0 AND SGN(SB%)<>SGN(D%) THEN SB%=0 ELSE IF ABS(SB%)<SBM% THEN SB%=SB%+SGN(D%)*SBI%
ENDPROC

REM the ball needs two overlapping sprites, use whole of channels 0,1 for that purpose for now
DEFPROCupdate_sprites:LOCALTT%
PROCctldata(L1%,L%+X%,T%+Y%,16,TRUE,FALSE,FALSE,&3060+Z%)
PROCctldata(L1%+8,L%+X%,T%+Y%,16,FALSE,FALSE,FALSE,&30A0+Z%)
PROCctldata(L1%+16,L%+BATX%,T%+BATY%,8,FALSE,FALSE,FALSE,&3020)
PROCctldata(L1%+24,L%+BATX%+16,T%+BATY%,8,FALSE,FALSE,FALSE,&3040)
REM swap list pointers
!&FD0C=L1%:!&FD1C=L1%+8:!&FD2C=L1%+16:!&FD3C=L1%+24
A%=19:CALL&FFF4:REMvsync
TT%=L1%:L1%=L2%:L2%=TT%
ENDPROC


REM P = addr, X,Y,H - position/height A%=attach, D%=load data pointer next, C%=continue
DEFPROCctl(P%,X%,Y%,H%,A%,D%,C%):?P%=X%:P%?1=Y%:P%?2=Y%+H%:P%?3=((X%>255)AND1)OR((Y%>255)AND2)OR(((Y%+H%)>255)AND4)OR(A%AND128)OR(D%AND64)OR(C%AND32):ENDPROC
DEFPROCctldata(P%,X%,Y%,H%,A%,D%,C%,S%):?P%=X%:P%?1=Y%:P%?2=Y%+H%:P%?3=((X%>255)AND1)OR((Y%>255)AND2)OR(((Y%+H%)>255)AND4)OR(A%AND128)OR(D%AND64)OR(C%AND32):P%!4=S%:ENDPROC

 900DEFPROCpal:LOCALI,X:FORI=0TO15:READX%:?&FE23=X%DIV256:?&FE23=X%:NEXT:ENDPROC
1000DATA&0000,&1333,&2777,&3FF0,&400F,&5F0F,&60FF,&7FFF,&8502,&9E95,&A158,&BCC9,&CF80,&DAD3,&E99E,&FFFF
